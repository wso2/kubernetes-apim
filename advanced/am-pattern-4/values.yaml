# Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

wso2:
  # WSO2 Subscription parameters (https://wso2.com/subscription/)
  # If provided, these parameters will be used to obtain official WSO2 product Docker images available at WSO2 Private Docker Registry (https://docker.wso2.com/)
  # for this deployment
  subscription:
    username: ""
    password: ""
  
  # WSO2 Choreo Analytics Parameters
  # If provided, these parameters will be used publish analytics data to Choreo Analytics environment (https://apim.docs.wso2.com/en/latest/observe/api-manager-analytics/configure-analytics/register-for-analytics/).
  choreoAnalytics:
    enabled: false
    endpoint: ""
    onpremKey: ""

  deployment:
    dependencies:
      # The configuration should be set to be 'true' if a MySQL database should be spawned as a pod within the cluster
      mysql: true
      # Enable NFS dynamic provisioner for Kubernetes
      nfsServerProvisioner: true

    # Persisted and shared runtime artifacts for API Manager
    # See official documentation (from https://apim.docs.wso2.com/en/latest/install-and-setup/setup/reference/common-runtime-and-configuration-artifacts/#persistent-runtime-artifacts)
    persistentRuntimeArtifacts:
      # Kubernetes Storage Class to be used to dynamically provision the relevant Persistent Volumes
      # Only persistent storage solutions supporting ReadWriteMany access mode are applicable (https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes)
      # Defaults to Kubernetes Storage Class generated using the NFS Server Provisioner (https://github.com/helm/charts/tree/master/stable/nfs-server-provisioner)
      storageClass: &storage_class "nfs"

      # Persistent runtime artifacts for Apache Solr-based indexing
      apacheSolrIndexing:
        # Indicates if persistence of the runtime artifacts for Apache Solr-based indexing is enabled
        # By default, this is disabled
        enabled: false
        # Define capacities for persistent runtime artifact directories
        capacity:
          # For persisting the H2 based local Carbon database file
          carbonDatabase: 50M
          # For persisting the indexed data
          solrIndexedData: 50M

    am:
      # Container image configurations
      # If a custom image must be used, uncomment 'dockerRegistry' and provide its value
      # dockerRegistry: ""
      imageName: "wso2am"
      imageTag: "4.0.0"
      # Refer to the Kubernetes documentation on updating images (https://kubernetes.io/docs/concepts/containers/images/#updating-images)
      imagePullPolicy: Always

      resources:
        # These are the resource recommendations for running WSO2 API Management product profiles with profile optimization
        # Resource configurations defined here are applicable for all API Manager product profiles of this deployment
        requests:
          memory: "1Gi"
          cpu: "1000m"
        limits:
          memory: "2Gi"
          cpu: "2000m"
        # JVM settings
        # These are the resource allocation configurations associated with the JVM
        # Refer to the official documentation for advanced details (https://apim.docs.wso2.com/en/latest/install-and-setup/install/installation-prerequisites/)
        jvm:
          # Resource allocation for the Java Heap
          heap:
            memory:
              # Initial and minimum Heap size
              xms: "512m"
              # Maximum Heap size
              xmx: "512m"

      # Kubernetes Probes
      # Startup probe executed prior to Liveness Probe taking over
      startupProbe:
        # Number of seconds after the container has started before startup probes are initiated
        initialDelaySeconds: 45
        # How often (in seconds) to perform the probe
        periodSeconds: 5
        # Number of attempts
        failureThreshold: 8
      # Indicates whether the container is running
      livenessProbe:
        # How often (in seconds) to perform the probe
        periodSeconds: 10
        # Indicates whether the container is ready to service requests
      readinessProbe:
        # Number of seconds after the container has started before readiness probes are initiated
        initialDelaySeconds: 50
        # How often (in seconds) to perform the probe
        periodSeconds: 10

      # API Manager's WebSub specific configurations
      websub:
        # Configure Ingress
        ingress:
          # Name of the IngressClass to use
          className: ""
          # Hostname for Gateway (WebSub) service
          hostname: "websub.am.wso2.com"
          # Annotations for the API Manager Gateway (WebSub) service Ingress
          annotations:
            kubernetes.io/ingress.class: "nginx"
            nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"

      # API Manager's Gateway specific configurations
      gateway:
        # Configure Ingress
        ingress:
          # Name of the IngressClass to use
          className: ""
          # Hostname for Gateway profile
          hostname: "gateway.am.wso2.com"
          # Annotations for the API Manager Gateway service Ingress
          annotations:
            kubernetes.io/ingress.class: "nginx"
            nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"

        # Number of deployment replicas
        replicas: 2

        # Kubernetes RollingUpdate strategy configurations
        strategy:
          rollingUpdate:
            # The maximum number of pods that can be scheduled above the desired number of pods
            maxSurge: 2
            # The maximum number of pods that can be unavailable during the update
            maxUnavailable: 0

      # API Manager's Control Plane specific configurations
      trafficmanager:
        # Indicates whether the container is running
        livenessProbe:
          # Number of seconds after the container has started before liveness probes are initiated
          initialDelaySeconds: 180
          # How often (in seconds) to perform the probe
          periodSeconds: 10
        # Indicates whether the container is ready to service requests
        readinessProbe:
          # Number of seconds after the container has started before readiness probes are initiated
          initialDelaySeconds: 180
          # How often (in seconds) to perform the probe
          periodSeconds: 10
              # Number of deployment replicas
        replicas: 2
        resources:
           # These are the minimum resource recommendations for running WSO2 API Management Control Plane deployment
           # as per official documentation (https://apim.docs.wso2.com/en/latest/install-and-setup/install/installation-prerequisites/)
           requests:
             memory: "2Gi"
             cpu: "2000m"
           limits:
             memory: "3Gi"
             cpu: "3000m"
           # JVM settings
           # These are the resource allocation configurations associated with the JVM
           # Refer to the official documentation for advanced details (https://apim.docs.wso2.com/en/latest/install-and-setup/install/installation-prerequisites/)
           jvm:
             # Resource allocation for the Java Heap
             heap:
                memory:
                # Initial and minimum Heap size
                  xms: "1024m"
                  # Maximum Heap size
                  xmx: "1024m"

        # If the deployment configurations for the Gateway profile of WSO2 API Manager v3.2.0 (<WSO2AM>/repository/conf/deployment.toml),
        # add the customized configuration file under (wso2 -> deployment -> am -> gateway -> config -> deployment.toml)
#        config:
#          deployment.toml: |-
#            # deployment configurations for the Gateway profile of WSO2 API Manager v3.2.0 (<WSO2AM>/repository/conf/deployment.toml)

      # API Manager's Control Plane specific configurations
      cp:
        # Kubernetes Probes
        # Startup probe executed prior to Liveness Probe taking over
        startupProbe:
          # Number of seconds after the container has started before startup probes are initiated
          initialDelaySeconds: 60
          # How often (in seconds) to perform the probe
          periodSeconds: 5
          # Number of attempts
          failureThreshold: 8
        # Indicates whether the container is running
        livenessProbe:
          # How often (in seconds) to perform the probe
          periodSeconds: 10
          # Indicates whether the container is ready to service requests
        readinessProbe:
          # Number of seconds after the container has started before readiness probes are initiated
          initialDelaySeconds: 80
          # How often (in seconds) to perform the probe
          periodSeconds: 10

        # Configure Ingress
        ingress:
          # Name of the IngressClass to use
          className: ""
          # Hostname for Control Plane profile
          hostname: "am.wso2.com"
          # Annotations for the API Manager Control Plane service Ingress
          annotations:
            kubernetes.io/ingress.class: "nginx"
            nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
            nginx.ingress.kubernetes.io/affinity: "cookie"
            nginx.ingress.kubernetes.io/session-cookie-name: "route"
            nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
        # Number of deployment replicas
        replicas: 2

        resources:
          # These are the minimum resource recommendations for running WSO2 API Management Control Plane deployment
          # as per official documentation (https://apim.docs.wso2.com/en/latest/install-and-setup/install/installation-prerequisites/)
          requests:
            memory: "2Gi"
            cpu: "2000m"
          limits:
            memory: "3Gi"
            cpu: "3000m"
          # JVM settings
          # These are the resource allocation configurations associated with the JVM
          # Refer to the official documentation for advanced details (https://apim.docs.wso2.com/en/latest/install-and-setup/install/installation-prerequisites/)
          jvm:
            # Resource allocation for the Java Heap
            heap:
              memory:
                # Initial and minimum Heap size
                xms: "1024m"
                # Maximum Heap size
                xmx: "1024m"

#        config:
#          deployment.toml: |-
#            # deployment configurations for the Control Plane profile of WSO2 API Manager v4.0.0 (<WSO2AM>/repository/conf/deployment.toml)

    mi:
      # If a custom image must be used, uncomment 'dockerRegistry' and provide its value.
      # dockerRegistry: ""
      imageName: "wso2mi"
      imageTag: "4.0.0"
      # Number of deployment replicas
      replicas: 2
      strategy:
        rollingUpdate:
          # The maximum number of pods that can be scheduled above the desired number of pods.
          maxSurge: 1
          # The maximum number of pods that can be unavailable during the update.
          maxUnavailable: 0
      # Kubernetes Probes
      # Startup probe executed prior to Liveness Probe taking over
      startupProbe:
        # Number of seconds after the container has started before startup probes are initiated
        initialDelaySeconds: 10
        # How often (in seconds) to perform the probe
        periodSeconds: 5
        # Number of attempts
        failureThreshold: 8
      # Indicates whether the container is running.
      livenessProbe:
        # How often (in seconds) to perform the probe.
        periodSeconds: 10
      # Indicates whether the container is ready to service requests.
      readinessProbe:
        # Number of seconds after the container has started before readiness probes are initiated.
        initialDelaySeconds: 35
        # How often (in seconds) to perform the probe.
        periodSeconds: 10
      # These are the minimum resource recommendations for running WSO2 Micro Integrator
      resources:
        requests:
          # The minimum amount of memory that should be allocated for a Pod
          memory: "512Mi"
          # The minimum amount of CPU that should be allocated for a Pod
          cpu: "500m"
        limits:
          # The maximum amount of memory that should be allocated for a Pod
          memory: "1Gi"
          # The maximum amount of CPU that should be allocated for a Pod
          cpu: "1000m"
      # Environment variables for the Micro integrator deployment.
      envs:
      #  ENV_NAME: ENV_VALUE
      # Configure synapse testing.
      synapseTest:
        enabled: false

      # Configure Ingresses
      ingress:
        # Name of the IngressClass to use
        className: ""
        # Configure management ingress
        management:
          # Hostname for the Micro Integrator management endpoint.
          hostname: "management.mi.wso2.com"
          # Annotations for the Micro Integrator management Ingress.
          annotations:
            kubernetes.io/ingress.class: "nginx"
            nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"

kubernetes:
  # Name of Kubernetes service account
  serviceAccount: "wso2am-pattern-4-svc-account"

# Override sub chart parameters
mysql-am:
  mysql:
    persistence:
      storageClass: *storage_class
