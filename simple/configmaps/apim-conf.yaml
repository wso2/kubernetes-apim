apiVersion: v1
data:
  api-manager.xml: |
    <APIManager>
        <DataSourceName>jdbc/WSO2AM_DB</DataSourceName>
        <GatewayType>Synapse</GatewayType>
        <EnableSecureVault>false</EnableSecureVault>
        <AuthManager>
            <ServerURL>https://localhost:${mgt.transport.https.port}${carbon.context}services/</ServerURL>
            <Username>${admin.username}</Username>
            <Password>${admin.password}</Password>
            <CheckPermissionsRemotely>false</CheckPermissionsRemotely>
        </AuthManager>
        <JWTConfiguration>
            <JWTHeader>X-JWT-Assertion</JWTHeader>
            <JWTGeneratorImpl>org.wso2.carbon.apimgt.keymgt.token.JWTGenerator</JWTGeneratorImpl>
        </JWTConfiguration>
        <APIGateway>
            <Environments>
                <Environment type="hybrid" api-console="true">
                    <Name>Production and Sandbox</Name>
                    <Description>This is a hybrid gateway that handles both production and sandbox token traffic.</Description>
                    <ServerURL>https://localhost:${mgt.transport.https.port}${carbon.context}services/</ServerURL>
                    <Username>${admin.username}</Username>
                    <Password>${admin.password}</Password>
                    <GatewayEndpoint>http://"ip.node.k8s.&.wso2.apim":"$nodeport.k8s.&.2.wso2apim",https://"ip.node.k8s.&.wso2.apim":"$nodeport.k8s.&.2.wso2apim"</GatewayEndpoint>
                    <GatewayWSEndpoint>ws://${carbon.local.ip}:9099</GatewayWSEndpoint>
                </Environment>
            </Environments>
        </APIGateway>
        <CacheConfigurations>
            <EnableGatewayTokenCache>true</EnableGatewayTokenCache>
            <EnableGatewayResourceCache>true</EnableGatewayResourceCache>
            <EnableKeyManagerTokenCache>false</EnableKeyManagerTokenCache>
            <EnableRecentlyAddedAPICache>false</EnableRecentlyAddedAPICache>
            <EnableScopeCache>true</EnableScopeCache>
            <EnablePublisherRoleCache>true</EnablePublisherRoleCache>
            <EnableJWTClaimCache>true</EnableJWTClaimCache>
        </CacheConfigurations>
        <Analytics>
            <Enabled>true</Enabled>
            <StreamProcessorServerURL>tcp://wso2apim-with-analytics-apim-analytics-service:7612</StreamProcessorServerURL>
            <StreamProcessorAuthServerURL>ssl://wso2apim-with-analytics-apim-analytics-service:7712</StreamProcessorAuthServerURL>
            <StreamProcessorUsername>${admin.username}</StreamProcessorUsername>
            <StreamProcessorPassword>${admin.password}</StreamProcessorPassword>
            <StatsProviderImpl>org.wso2.carbon.apimgt.usage.client.impl.APIUsageStatisticsRestClientImpl</StatsProviderImpl>
            <StreamProcessorRestApiURL>https://wso2apim-with-analytics-apim-analytics-service:7444</StreamProcessorRestApiURL>
            <StreamProcessorRestApiUsername>${admin.username}</StreamProcessorRestApiUsername>
            <StreamProcessorRestApiPassword>${admin.password}</StreamProcessorRestApiPassword>
            <SkipEventReceiverConnection>false</SkipEventReceiverConnection>
            <SkipWorkflowEventPublisher>false</SkipWorkflowEventPublisher>
            <PublisherClass>org.wso2.carbon.apimgt.usage.publisher.APIMgtUsageDataBridgeDataPublisher</PublisherClass>
            <PublishResponseMessageSize>false</PublishResponseMessageSize>
            <Streams>
                <Request>
                    <Name>org.wso2.apimgt.statistics.request</Name>
                    <Version>3.0.0</Version>
                </Request>
                <Fault>
                    <Name>org.wso2.apimgt.statistics.fault</Name>
                    <Version>3.0.0</Version>
                </Fault>
                <Throttle>
                    <Name>org.wso2.apimgt.statistics.throttle</Name>
                    <Version>3.0.0</Version>
                </Throttle>
                <Workflow>
                    <Name>org.wso2.apimgt.statistics.workflow</Name>
                    <Version>1.0.0</Version>
                </Workflow>
                <AlertTypes>
                    <Name>org.wso2.analytics.apim.alertStakeholderInfo</Name>
                    <Version>1.0.1</Version>
                </AlertTypes>
            </Streams>
        </Analytics>
        <APIKeyValidator>
            <ServerURL>https://localhost:${mgt.transport.https.port}${carbon.context}services/</ServerURL>
            <Username>${admin.username}</Username>
            <Password>${admin.password}</Password>
            <KeyValidatorClientType>ThriftClient</KeyValidatorClientType>
            <ThriftClientConnectionTimeOut>10000</ThriftClientConnectionTimeOut>
            <EnableThriftServer>true</EnableThriftServer>
            <ThriftServerHost>localhost</ThriftServerHost>
            <KeyValidationHandlerClassName>org.wso2.carbon.apimgt.keymgt.handlers.DefaultKeyValidationHandler</KeyValidationHandlerClassName>
        </APIKeyValidator>
        <OAuthConfigurations>
            <ApplicationTokenScope>am_application_scope</ApplicationTokenScope>
            <TokenEndPointName>/oauth2/token</TokenEndPointName>
            <RevokeAPIURL>https://localhost:${https.nio.port}/revoke</RevokeAPIURL>
            <EncryptPersistedTokens>false</EncryptPersistedTokens>
            <EnableTokenHashMode>false</EnableTokenHashMode>
        </OAuthConfigurations>
        <TierManagement>
            <EnableUnlimitedTier>true</EnableUnlimitedTier>
        </TierManagement>
        <APIStore>
            <CompareCaseInsensitively>true</CompareCaseInsensitively>
            <DisplayURL>false</DisplayURL>
            <URL>https://"ip.node.k8s.&.wso2.apim":"$nodeport.k8s.&.1.wso2apim"/store</URL>
            <ServerURL>https://localhost:${mgt.transport.https.port}${carbon.context}services/</ServerURL>
            <Username>${admin.username}</Username>
            <Password>${admin.password}</Password>
            <DisplayMultipleVersions>false</DisplayMultipleVersions>
            <DisplayAllAPIs>false</DisplayAllAPIs>
            <DisplayComments>true</DisplayComments>
            <DisplayRatings>true</DisplayRatings>
        </APIStore>
        <APIPublisher>
            <DisplayURL>false</DisplayURL>
            <URL>https://localhost:${mgt.transport.https.port}/publisher</URL>
            <EnableAccessControl>true</EnableAccessControl>
        </APIPublisher>
        <CORSConfiguration>
            <Enabled>true</Enabled>
            <Access-Control-Allow-Origin>*</Access-Control-Allow-Origin>
            <Access-Control-Allow-Methods>GET,PUT,POST,DELETE,PATCH,OPTIONS</Access-Control-Allow-Methods>
            <Access-Control-Allow-Headers>authorization,Access-Control-Allow-Origin,Content-Type,SOAPAction</Access-Control-Allow-Headers>
            <Access-Control-Allow-Credentials>false</Access-Control-Allow-Credentials>
        </CORSConfiguration>
        <RESTAPI>
            <WhiteListedURIs>
                <WhiteListedURI>
                    <URI>/api/am/publisher/{version}/swagger.json</URI>
                    <HTTPMethods>GET,HEAD</HTTPMethods>
                </WhiteListedURI>
                <WhiteListedURI>
                    <URI>/api/am/store/{version}/swagger.json</URI>
                    <HTTPMethods>GET,HEAD</HTTPMethods>
                </WhiteListedURI>
                <WhiteListedURI>
                    <URI>/api/am/admin/{version}/swagger.json</URI>
                    <HTTPMethods>GET,HEAD</HTTPMethods>
                </WhiteListedURI>
                <WhiteListedURI>
                    <URI>/api/am/store/{version}/apis</URI>
                    <HTTPMethods>GET,HEAD</HTTPMethods>
                </WhiteListedURI>
                <WhiteListedURI>
                    <URI>/api/am/store/{version}/apis/{apiId}</URI>
                    <HTTPMethods>GET,HEAD</HTTPMethods>
                </WhiteListedURI>
                <WhiteListedURI>
                    <URI>/api/am/store/{version}/apis/{apiId}/swagger</URI>
                    <HTTPMethods>GET,HEAD</HTTPMethods>
                </WhiteListedURI>
                <WhiteListedURI>
                    <URI>/api/am/store/{version}/apis/{apiId}/documents</URI>
                    <HTTPMethods>GET,HEAD</HTTPMethods>
                </WhiteListedURI>
                <WhiteListedURI>
                    <URI>/api/am/store/{version}/apis/{apiId}/documents/{documentId}</URI>
                    <HTTPMethods>GET,HEAD</HTTPMethods>
                </WhiteListedURI>
                <WhiteListedURI>
                    <URI>/api/am/store/{version}/apis/{apiId}/documents/{documentId}/content</URI>
                    <HTTPMethods>GET,HEAD</HTTPMethods>
                </WhiteListedURI>
                <WhiteListedURI>
                    <URI>/api/am/store/{version}/apis/{apiId}/thumbnail</URI>
                    <HTTPMethods>GET,HEAD</HTTPMethods>
                </WhiteListedURI>
                <WhiteListedURI>
                    <URI>/api/am/store/{version}/tags</URI>
                    <HTTPMethods>GET,HEAD</HTTPMethods>
                </WhiteListedURI>
                <WhiteListedURI>
                    <URI>/api/am/store/{version}/tiers/{tierLevel}</URI>
                    <HTTPMethods>GET,HEAD</HTTPMethods>
                </WhiteListedURI>
                <WhiteListedURI>
                    <URI>/api/am/store/{version}/tiers/{tierLevel}/{tierName}</URI>
                    <HTTPMethods>GET,HEAD</HTTPMethods>
                </WhiteListedURI>
            </WhiteListedURIs>
            <ETagSkipList>
                <ETagSkipURI>
                    <URI>/api/am/store/{version}/apis</URI>
                    <HTTPMethods>GET</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/store/{version}/apis/generate-sdk</URI>
                    <HTTPMethods>POST</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/store/{version}/apis/{apiId}/documents</URI>
                    <HTTPMethods>GET</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/store/{version}/applications</URI>
                    <HTTPMethods>GET</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/store/{version}/applications/generate-keys</URI>
                    <HTTPMethods>POST</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/store/{version}/subscriptions</URI>
                    <HTTPMethods>GET,POST</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/store/{version}/tags</URI>
                    <HTTPMethods>GET</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/store/{version}/tiers/{tierLevel}</URI>
                    <HTTPMethods>GET</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/store/{version}/tiers/{tierLevel}/{tierName}</URI>
                    <HTTPMethods>GET</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/publisher/{version}/apis</URI>
                    <HTTPMethods>GET,POST</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/publisher/{version}/apis/{apiId}</URI>
                    <HTTPMethods>GET,DELETE,PUT</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/publisher/{version}/apis/{apiId}/swagger</URI>
                    <HTTPMethods>GET,PUT</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/publisher/{version}/apis/{apiId}/thumbnail</URI>
                    <HTTPMethods>GET,POST</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/publisher/{version}/apis/{apiId}/change-lifecycle</URI>
                    <HTTPMethods>POST</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/publisher/{version}/apis/{apiId}/copy-api</URI>
                    <HTTPMethods>POST</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/publisher/{version}/applications/{applicationId}</URI>
                    <HTTPMethods>GET</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/publisher/{version}/apis/{apiId}/documents</URI>
                    <HTTPMethods>GET,POST</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/publisher/{version}/apis/{apiId}/documents/{documentId}/content</URI>
                    <HTTPMethods>GET,POST</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/publisher/{version}/apis/{apiId}/documents/{documentId}</URI>
                    <HTTPMethods>GET,PUT,DELETE</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/publisher/{version}/environments</URI>
                    <HTTPMethods>GET</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/publisher/{version}/subscriptions</URI>
                    <HTTPMethods>GET</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/publisher/{version}/subscriptions/block-subscription</URI>
                    <HTTPMethods>POST</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/publisher/{version}/subscriptions/{subscriptionId}</URI>
                    <HTTPMethods>GET</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/publisher/{version}/subscriptions/unblock-subscription</URI>
                    <HTTPMethods>POST</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/publisher/{version}/tiers/{tierLevel}</URI>
                    <HTTPMethods>GET,POST</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/publisher/{version}/tiers/{tierLevel}/{tierName}</URI>
                    <HTTPMethods>GET,PUT,DELETE</HTTPMethods>
                </ETagSkipURI>
                <ETagSkipURI>
                    <URI>/api/am/publisher/{version}/tiers/update-permission</URI>
                    <HTTPMethods>POST</HTTPMethods>
                </ETagSkipURI>
            </ETagSkipList>
        </RESTAPI>
        <ThrottlingConfigurations>
            <EnableAdvanceThrottling>true</EnableAdvanceThrottling>
            <TrafficManager>
                <Type>Binary</Type>
                <ReceiverUrlGroup>tcp://${carbon.local.ip}:${receiver.url.port}</ReceiverUrlGroup>
                <AuthUrlGroup>ssl://${carbon.local.ip}:${auth.url.port}</AuthUrlGroup>
                <Username>${admin.username}</Username>
                <Password>${admin.password}</Password>
            </TrafficManager>
            <DataPublisher>
                <Enabled>true</Enabled>
                <DataPublisherPool>
                    <MaxIdle>1000</MaxIdle>
                    <InitIdleCapacity>200</InitIdleCapacity>
                </DataPublisherPool>
                <DataPublisherThreadPool>
                    <CorePoolSize>200</CorePoolSize>
                    <MaxmimumPoolSize>1000</MaxmimumPoolSize>
                    <KeepAliveTime>200</KeepAliveTime>
                </DataPublisherThreadPool>
            </DataPublisher>
            <PolicyDeployer>
                <Enabled>true</Enabled>
                <ServiceURL>https://localhost:${mgt.transport.https.port}${carbon.context}services/</ServiceURL>
                <Username>${admin.username}</Username>
                <Password>${admin.password}</Password>
            </PolicyDeployer>
            <BlockCondition>
                <Enabled>true</Enabled>
            </BlockCondition>
            <JMSConnectionDetails>
                <Enabled>true</Enabled>
                <JMSConnectionParameters>
                    <transport.jms.ConnectionFactoryJNDIName>TopicConnectionFactory</transport.jms.ConnectionFactoryJNDIName>
                    <transport.jms.DestinationType>topic</transport.jms.DestinationType>
                    <java.naming.factory.initial>org.wso2.andes.jndi.PropertiesFileInitialContextFactory</java.naming.factory.initial>
                    <connectionfactory.TopicConnectionFactory>amqp://${admin.username}:${admin.password}@clientid/carbon?brokerlist='tcp://${carbon.local.ip}:${jms.port}'</connectionfactory.TopicConnectionFactory>
                </JMSConnectionParameters>
            </JMSConnectionDetails>
            <EnableUnlimitedTier>true</EnableUnlimitedTier>
            <EnableHeaderConditions>false</EnableHeaderConditions>
            <EnableJWTClaimConditions>false</EnableJWTClaimConditions>
            <EnableQueryParamConditions>false</EnableQueryParamConditions>
        </ThrottlingConfigurations>
        <WorkflowConfigurations>
            <Enabled>false</Enabled>
            <ServerUrl>https://localhost:9445/bpmn</ServerUrl>
            <ServerUser>${admin.username}</ServerUser>
            <ServerPassword>${admin.password}</ServerPassword>
            <WorkflowCallbackAPI>https://localhost:${mgt.transport.https.port}/api/am/publisher/v0.14/workflows/update-workflow-status</WorkflowCallbackAPI>
            <TokenEndPoint>https://localhost:${https.nio.port}/token</TokenEndPoint>
            <DCREndPoint>https://localhost:${mgt.transport.https.port}/client-registration/v0.14/register</DCREndPoint>
            <DCREndPointUser>${admin.username}</DCREndPointUser>
            <DCREndPointPassword>${admin.password}</DCREndPointPassword>
        </WorkflowConfigurations>
        <SwaggerCodegen>
            <ClientGeneration>
                <GroupId>org.wso2</GroupId>
                <ArtifactId>org.wso2.client.</ArtifactId>
                <ModelPackage>org.wso2.client.model.</ModelPackage>
                <ApiPackage>org.wso2.client.api.</ApiPackage>
                <SupportedLanguages>java,android</SupportedLanguages>
            </ClientGeneration>
        </SwaggerCodegen>
    </APIManager>
  carbon.xml: |
    <?xml version="1.0" encoding="ISO-8859-1"?>
    <Server xmlns="http://wso2.org/projects/carbon/carbon.xml">
        <Name>WSO2 API Manager</Name>
        <ServerKey>AM</ServerKey>
        <Version>2.6.0</Version>
        <HostName>"ip.node.k8s.&.wso2.apim"</HostName>
        <MgtHostName>"ip.node.k8s.&.wso2.apim"</MgtHostName>
        <ServerURL>local:/${carbon.context}/services/</ServerURL>
        <ServerRoles>
            <Role>APIManager</Role>
        </ServerRoles>
        <Package>org.wso2.carbon</Package>
        <WebContextRoot>/</WebContextRoot>
        <ItemsPerPage>15</ItemsPerPage>
        <Ports>
            <Offset>0</Offset>
            <JMX>
                <RMIRegistryPort>9999</RMIRegistryPort>
                <RMIServerPort>11111</RMIServerPort>
            </JMX>
            <EmbeddedLDAP>
                <LDAPServerPort>10389</LDAPServerPort>
                <KDCServerPort>8000</KDCServerPort>
            </EmbeddedLDAP>
            <ThriftEntitlementReceivePort>10500</ThriftEntitlementReceivePort>
        </Ports>
        <JNDI>
            <DefaultInitialContextFactory>org.wso2.carbon.tomcat.jndi.CarbonJavaURLContextFactory</DefaultInitialContextFactory>
            <Restrictions>
                <AllTenants>
                    <UrlContexts>
                        <UrlContext>
                            <Scheme>java</Scheme>
                        </UrlContext>
                    </UrlContexts>
                </AllTenants>
            </Restrictions>
        </JNDI>
        <IsCloudDeployment>false</IsCloudDeployment>
        <EnableMetering>false</EnableMetering>
        <MaxThreadExecutionTime>600</MaxThreadExecutionTime>
        <GhostDeployment>
            <Enabled>false</Enabled>
        </GhostDeployment>
        <Tenant>
            <LoadingPolicy>
                <LazyLoading>
                    <IdleTime>30</IdleTime>
                </LazyLoading>
            </LoadingPolicy>
        </Tenant>
        <Cache>
            <DefaultCacheTimeout>15</DefaultCacheTimeout>
            <ForceLocalCache>false</ForceLocalCache>
        </Cache>
        <Axis2Config>
            <RepositoryLocation>${carbon.home}/repository/deployment/server/</RepositoryLocation>
            <DeploymentUpdateInterval>15</DeploymentUpdateInterval>
            <ConfigurationFile>${carbon.home}/repository/conf/axis2/axis2.xml</ConfigurationFile>
            <ServiceGroupContextIdleTime>30000</ServiceGroupContextIdleTime>
            <ClientRepositoryLocation>${carbon.home}/repository/deployment/client/</ClientRepositoryLocation>
            <clientAxis2XmlLocation>${carbon.home}/repository/conf/axis2/axis2_client.xml</clientAxis2XmlLocation>
            <HideAdminServiceWSDLs>true</HideAdminServiceWSDLs>
        </Axis2Config>
        <ServiceUserRoles>
            <Role>
                <Name>admin</Name>
                <Description>Default Administrator Role</Description>
            </Role>
            <Role>
                <Name>user</Name>
                <Description>Default User Role</Description>
            </Role>
        </ServiceUserRoles>
        <CryptoService>
            <Enabled>true</Enabled>
            <InternalCryptoProviderClassName>org.wso2.carbon.crypto.provider.KeyStoreBasedInternalCryptoProvider</InternalCryptoProviderClassName>
            <ExternalCryptoProviderClassName>org.wso2.carbon.core.encryption.KeyStoreBasedExternalCryptoProvider</ExternalCryptoProviderClassName>
            <KeyResolvers>
                <KeyResolver className="org.wso2.carbon.crypto.defaultProvider.resolver.ContextIndependentKeyResolver" priority="-1"/>
            </KeyResolvers>
        </CryptoService>
        <Security>
            <KeyStore>
                <Location>${carbon.home}/repository/resources/security/wso2carbon.jks</Location>
                <Type>JKS</Type>
                <Password>wso2carbon</Password>
                <KeyAlias>wso2carbon</KeyAlias>
                <KeyPassword>wso2carbon</KeyPassword>
            </KeyStore>
            <InternalKeyStore>
                <Location>${carbon.home}/repository/resources/security/wso2carbon.jks</Location>
                <Type>JKS</Type>
                <Password>wso2carbon</Password>
                <KeyAlias>wso2carbon</KeyAlias>
                <KeyPassword>wso2carbon</KeyPassword>
            </InternalKeyStore>
            <TrustStore>
                <Location>${carbon.home}/repository/resources/security/client-truststore.jks</Location>
                <Type>JKS</Type>
                <Password>wso2carbon</Password>
            </TrustStore>
            <NetworkAuthenticatorConfig>
            </NetworkAuthenticatorConfig>
            <TomcatRealm>UserManager</TomcatRealm>
            <DisableTokenStore>false</DisableTokenStore>
            <XSSPreventionConfig>
                <Enabled>true</Enabled>
                <Rule>allow</Rule>
                <Patterns>
                </Patterns>
            </XSSPreventionConfig>
        </Security>
        <HideMenuItemIds>
            <HideMenuItemId>claim_mgt_menu</HideMenuItemId>
            <HideMenuItemId>identity_mgt_emailtemplate_menu</HideMenuItemId>
            <HideMenuItemId>identity_security_questions_menu</HideMenuItemId>
        </HideMenuItemIds>
        <WorkDirectory>${carbon.home}/tmp/work</WorkDirectory>
        <HouseKeeping>
            <AutoStart>true</AutoStart>
            <Interval>10</Interval>
            <MaxTempFileLifetime>30</MaxTempFileLifetime>
        </HouseKeeping>
        <FileUploadConfig>
            <TotalFileSizeLimit>100</TotalFileSizeLimit>
            <Mapping>
                <Actions>
                    <Action>keystore</Action>
                    <Action>certificate</Action>
                    <Action>*</Action>
                </Actions>
                <Class>org.wso2.carbon.ui.transports.fileupload.AnyFileUploadExecutor</Class>
            </Mapping>
            <Mapping>
                <Actions>
                    <Action>jarZip</Action>
                </Actions>
                <Class>org.wso2.carbon.ui.transports.fileupload.JarZipUploadExecutor</Class>
            </Mapping>
            <Mapping>
                <Actions>
                    <Action>dbs</Action>
                </Actions>
                <Class>org.wso2.carbon.ui.transports.fileupload.DBSFileUploadExecutor</Class>
            </Mapping>
            <Mapping>
                <Actions>
                    <Action>tools</Action>
                </Actions>
                <Class>org.wso2.carbon.ui.transports.fileupload.ToolsFileUploadExecutor</Class>
            </Mapping>
            <Mapping>
                <Actions>
                    <Action>toolsAny</Action>
                </Actions>
                <Class>org.wso2.carbon.ui.transports.fileupload.ToolsAnyFileUploadExecutor</Class>
            </Mapping>
        </FileUploadConfig>
        <HttpGetRequestProcessors>
            <Processor>
                <Item>info</Item>
                <Class>org.wso2.carbon.core.transports.util.InfoProcessor</Class>
            </Processor>
            <Processor>
                <Item>wsdl</Item>
                <Class>org.wso2.carbon.core.transports.util.Wsdl11Processor</Class>
            </Processor>
            <Processor>
                <Item>wsdl2</Item>
                <Class>org.wso2.carbon.core.transports.util.Wsdl20Processor</Class>
            </Processor>
            <Processor>
                <Item>xsd</Item>
                <Class>org.wso2.carbon.core.transports.util.XsdProcessor</Class>
            </Processor>
        </HttpGetRequestProcessors>
        <DeploymentSynchronizer>
            <Enabled>false</Enabled>
            <AutoCommit>false</AutoCommit>
            <AutoCheckout>true</AutoCheckout>
            <RepositoryType>svn</RepositoryType>
            <SvnUrl>http://svnrepo.example.com/repos/</SvnUrl>
            <SvnUser>username</SvnUser>
            <SvnPassword>password</SvnPassword>
            <SvnUrlAppendTenantId>true</SvnUrlAppendTenantId>
        </DeploymentSynchronizer>
        <ServerInitializers>
        </ServerInitializers>
        <RequireCarbonServlet>${require.carbon.servlet}</RequireCarbonServlet>
        <StatisticsReporterDisabled>true</StatisticsReporterDisabled>
        <FeatureRepository>
            <RepositoryName>default repository</RepositoryName>
            <RepositoryURL>http://product-dist.wso2.com/p2/carbon/releases/wilkes/</RepositoryURL>
        </FeatureRepository>
        <APIManagement>
            <Enabled>true</Enabled>
            <LoadAPIContextsInServerStartup>true</LoadAPIContextsInServerStartup>
        </APIManagement>
    </Server>
  user-mgt.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <UserManager>
        <Realm>
            <Configuration>
                <AddAdmin>true</AddAdmin>
                <AdminRole>admin</AdminRole>
                <AdminUser>
                    <UserName>admin</UserName>
                    <Password>admin</Password>
                </AdminUser>
                <EveryOneRoleName>everyone</EveryOneRoleName>
                <Property name="isCascadeDeleteEnabled">true</Property>
                <Property name="initializeNewClaimManager">true</Property>
                <Property name="dataSource">jdbc/WSO2UM_DB</Property>
            </Configuration>
            <UserStoreManager class="org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager">
                <Property name="TenantManager">org.wso2.carbon.user.core.tenant.JDBCTenantManager</Property>
                <Property name="ReadOnly">false</Property>
                <Property name="ReadGroups">true</Property>
                <Property name="WriteGroups">true</Property>
                <Property name="UsernameJavaRegEx">^[\S]{3,30}$</Property>
                <Property name="UsernameJavaScriptRegEx">^[\S]{3,30}$</Property>
                <Property name="UsernameJavaRegExViolationErrorMsg">Username pattern policy violated</Property>
                <Property name="PasswordJavaRegEx">^[\S]{5,30}$</Property>
                <Property name="PasswordJavaScriptRegEx">^[\S]{5,30}$</Property>
                <Property name="PasswordJavaRegExViolationErrorMsg">Password length should be within 5 to 30 characters</Property>
                <Property name="RolenameJavaRegEx">^[\S]{3,30}$</Property>
                <Property name="RolenameJavaScriptRegEx">^[\S]{3,30}$</Property>
                <Property name="CaseInsensitiveUsername">true</Property>
                <Property name="SCIMEnabled">false</Property>
                <Property name="IsBulkImportSupported">true</Property>
                <Property name="PasswordDigest">SHA-256</Property>
                <Property name="StoreSaltedPassword">true</Property>
                <Property name="MultiAttributeSeparator">,</Property>
                <Property name="MaxUserNameListLength">100</Property>
                <Property name="MaxRoleNameListLength">100</Property>
                <Property name="UserRolesCacheEnabled">true</Property>
                <Property name="UserNameUniqueAcrossTenants">false</Property>
            </UserStoreManager>
                  <AuthorizationManager class="org.wso2.carbon.user.core.authorization.JDBCAuthorizationManager">
                <Property name="AdminRoleManagementPermissions">/permission</Property>
                <Property name="AuthorizationCacheEnabled">true</Property>
                <Property name="GetAllRolesOfUserEnabled">false</Property>
            </AuthorizationManager>
        </Realm>
    </UserManager>
kind: ConfigMap
metadata:
  name: apim-conf
  namespace: "$ns.k8s.&.wso2.apim"
---
